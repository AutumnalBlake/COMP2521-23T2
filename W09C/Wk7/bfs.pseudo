function BFS(G, source, dest):
    Q = empty queue
    visited = empty set
    pred = [-1 for each vertex]

    enqueue source into Q
    add source to visited

    while Q is not empty:
        v = dequeue from Q

        visit v

        if v == dest: break

        for each vertex w adjacent to v:
            if w is not in visited: 
                pred[w] = v
                enqueue w into Q
                add w to visited

    for curr = dest, curr != -1, curr = pred[curr]:
        print curr
            
    
    
function DFS(G, source):
    S = empty stack
    visited = empty set

    push source onto S

    while S is not empty 
        v = pop from S

        if v is in visited:
            continue

        visit v
        add v to visited

        for each vertex w adjacent to v:
            // visited?
            push w onto S
        
    